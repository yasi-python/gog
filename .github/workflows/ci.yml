name: Go CI

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 * * * *"  # run every hour (UTC)

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Go mod tidy
        run: go mod tidy

      - name: Build
        run: |
          go build ./cmd/manager
          go build ./cmd/agent

      - name: Unit Tests
        run: go test -v ./...

  docker:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 30
    env:
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
      COMPOSE_PROJECT_NAME: v2mgr-ci
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Ensure Compose v2 available (no apt, no external compose action)
      - name: Ensure Docker Compose v2
        shell: bash
        run: |
          set -euo pipefail
          if docker compose version >/dev/null 2>&1; then
            docker compose version
          else
            echo "Installing Compose plugin locally..."
            mkdir -p ~/.docker/cli-plugins
            case "$(uname -m)" in
              x86_64|amd64)  ARCH_TAG="x86_64" ;;
              aarch64|arm64) ARCH_TAG="aarch64" ;;
              *)             ARCH_TAG="x86_64" ;;
            esac
            curl -fsSL -o ~/.docker/cli-plugins/docker-compose \
              "https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-${ARCH_TAG}"
            chmod +x ~/.docker/cli-plugins/docker-compose
            docker compose version
          fi

      - name: Prepare config and directories
        shell: bash
        env:
          CONFIG_YAML: ${{ secrets.CONFIG_YAML }}
        run: |
          set -euo pipefail
          if [ -n "${CONFIG_YAML:-}" ]; then
            printf "%s" "$CONFIG_YAML" > config.yaml
          else
            cp -f config.example.yaml config.yaml
          fi
          # Normalize line endings; avoid YAML control-char errors
          sed -i 's/\r$//' config.yaml
          if LC_ALL=C grep -qaP '[\x00-\x08\x0B\x0C\x0E-\x1F]' config.yaml; then
            echo "config.yaml contains control characters" >&2
            exit 1
          fi
          mkdir -p output data snapshots artifact

      # Compose file must:
      # - map ./config.yaml:/config.yaml:ro and ./output:/output
      # - manager: entrypoint ["/usr/local/bin/v2mgr"], command ["/config.yaml"]
      # - agent1:  entrypoint ["/usr/local/bin/v2agent"]
      - name: Compose up (build + start)
        run: docker compose up -d --build

      - name: Wait for health
        shell: bash
        run: |
          set -euo pipefail
          URL="http://localhost:8080/healthz"
          for i in {1..60}; do
            if curl -fsS "$URL" >/dev/null; then
              echo "Service healthy ✔"
              exit 0
            fi
            sleep 2
          done
          echo "Timed out waiting for $URL"
          docker compose ps || true
          docker compose logs --no-color || true
          exit 1

      - name: Wait for outputs
        shell: bash
        run: |
          set -euo pipefail
          PLAIN="output/merged_nodes.txt"
          B64="output/merged_sub_base64.txt"
          for i in {1..120}; do
            if [ -s "$PLAIN" ] && [ -s "$B64" ]; then
              echo "Outputs ready ✔"
              ls -lah output
              echo "Nodes:" $(grep -Ec '^(vmess://|vless://|trojan://|ss://|socks5://)' "$PLAIN" || true)
              head -c 200000 "$B64" | base64 -d >/dev/null 2>&1 && echo "Base64 decodes OK"
              exit 0
            fi
            sleep 2
          done
          echo "Outputs not produced in time"
          ls -lah output || true
          exit 1

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: clean-sub
          path: |
            output/merged_nodes.txt
            output/merged_sub_base64.txt
          if-no-files-found: error
          retention-days: 7

      - name: Compose logs (always)
        if: always()
        run: |
          docker ps
          docker compose logs --no-color || true

      - name: Compose down (always)
        if: always()
        run: docker compose down -v || true
